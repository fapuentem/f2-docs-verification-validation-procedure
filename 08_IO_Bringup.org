#+TITLE: I/O Visibility — F2 Smart Controller (F2SC01)
#+AUTHOR: Fabricio Puente M.
#+DATE: <2025-10-28 Tue>
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+OPTIONS: toc:t num:t ^:t
#+PROPERTY: header-args :results output :exports both
#+FILETAGS: :F2:CarrierBoard:VnV:IO:Kernel:Detection:GPIO:UART:I2C:SPI:CAN:TPM:Sensors:

* Purpose

Verify that Linux *can see* all F2SC01 low-speed I/O and onboard sensors:
device nodes exist, drivers bind, and key identity registers are readable.
(No extended functional/closed-loop testing here.)

* Scope

- PCB revision ~v3.1.x~ (or as specified)
- Jetson Orin NX (JetPack/L4T 5.1.2)
- After PCIe/USB visibility steps have passed

* Metadata

:PROPERTIES:
:Board-Model:   F2SC01
:PCB-Revision:
:SOM:           Jetson Orin NX (SKU: )
:Serial-Number:
:Lot/WO:
:Operator:
:DATE:
:END:

* Acceptance Criteria

- Kernel logs show controller/sensor probe without critical errors
- Expected nodes appear under */dev* and */sys*
- Basic ID / WHO_AM_I reads match data sheets (where applicable)
- Evidence saved under =evidence/io_visibility/=

* Notes

- Replace bus numbers if your DT assigns different I²C indices.
- Reads use =i2c-tools=; keep them brief and non-destructive.

* Global Kernel Footprint

** Device tree aliases (quick sanity)

#+BEGIN_SRC bash :results output :exports both
  tr -d '\0' </proc/device-tree/model 2>/dev/null || true
  echo "Aliases:"
  # Dump all alias -> target paths
  for f in /proc/device-tree/aliases/*; do
      alias=$(basename "$f")
    target=$(tr -d '\0' <"$f")
    printf "%-8s -> %s\n" "$alias" "$target"
  done
#+END_SRC

* USB Hub & RS-485 Bridge

** USB hub (SMSC/Microchip 0424:2514)

#+BEGIN_SRC bash :results output :exports both
  # Check for Microchip USB 2.0 Hub (VID:PID = 0424:2514)
  if lsusb | grep -qi "0424:2514"; then
    echo "✅ USB Hub 0424:2514 detected (Microchip Technology, Inc.)"
  else
    echo "❌ USB Hub 0424:2514 not found"
  fi
#+END_SRC

** FTDI bridge (0403:6015)  (Battery Monitor @ ttyUSBx)

#+BEGIN_SRC bash :results output :exports both
  # Check for FTDI USB device (VID:PID = 0403:6015)
  if lsusb | grep -qi "0403:6015"; then
    echo "✅ FTDI device 0403:6015 detected"
  else
    echo "❌ FTDI device 0403:6015 not found"
  fi

  # List serial devices associated with FTDI
  if ls /dev/ttyUSB* >/dev/null 2>&1; then
    echo "📂 Serial devices found:"
    ls -l /dev/ttyUSB*
  else
    echo "⚠️ No /dev/ttyUSB* device nodes detected"
  fi
#+END_SRC

** AX210 BT

#+BEGIN_SRC bash :results output :exports both
  # Intel Bluetooth USB interface uses Vendor 8087.
  # Common PIDs seen on AX2xx: 0026, 0029, 0032, 0033, 0035 (not exhaustive).
  if lsusb | grep -qiE "8087:(0026|0029|0032|0033|0035)"; then
    echo "✅ Intel Bluetooth interface detected (VID 8087)"
    # Show which one(s)
    lsusb | awk 'BEGIN{IGNORECASE=1}/8087:(0026|0029|0032|0033|0035)/{print "  • " $0}'
  else
    echo "❌ Intel Bluetooth interface not found (VID 8087 + common AX2xx PIDs)"
  fi
#+END_SRC

** M.2 Card – BLE/Matter
(This field is intentionally left blank, as the Matter M.2 card is still in development.)


* CAN-BUS (visibility only)

** Kernel modules

#+BEGIN_SRC bash :dir /sudo:: :results output :exports both
  echo "=== Loading CAN kernel modules ==="
  for mod in can can_raw mttcan; do
    if lsmod | grep -qw "$mod"; then
      echo "[OK] Module '$mod' already loaded"
    else
      echo "[..] Loading '$mod'..."
      if sudo modprobe "$mod"; then
        echo "[OK] '$mod' loaded successfully"
      else
        echo "[ERR] Failed to load '$mod'"
      fi
    fi
  done

  echo
  echo "=== Verifying loaded CAN modules ==="
  lsmod | egrep "^can|^mttcan" || echo "No CAN-related modules found!"

  echo
  echo "=== Checking CAN interfaces ==="
  ip -details link show type can 2>/dev/null || echo "No CAN interfaces detected yet."

#+END_SRC

** Observe bus traffic (non-intrusive)

#+BEGIN_SRC bash :dir /sudo:: :results output :exports both
  set -u

  IFACE="${IFACE:-can0}"          # override with: IFACE=can1
  BITRATE="${BITRATE:-1000000}"   # default 1 Mbps
  DUR="${DUR:-5}"                 # seconds to observe
  LOG="/tmp/candump_${IFACE}_$(date +%F_%H%M%S).log"

  echo "=== CAN traffic observation (non-intrusive) ==="
  echo "[i] Interface : $IFACE"
  echo "[i] Bitrate   : ${BITRATE} bps"
  echo "[i] Duration  : ${DUR}s"

  # 1) Ensure candump is available (quiet install if missing)
  if ! command -v candump >/dev/null 2>&1; then
    echo "[..] Installing can-utils..."
    if sudo apt-get update -qq && sudo apt-get install -y -qq can-utils; then
      echo "[OK] can-utils installed"
    else
      echo "[ERR] Failed to install can-utils"; exit 1
    fi
  fi

  # 2) Inspect interface state (non-intrusive)
  if ip link show "$IFACE" >/dev/null 2>&1; then
    echo
    echo "=== Interface status ==="
    ip -details -brief link show "$IFACE"
  else
    echo "[ERR] Interface '$IFACE' not found"
    echo "     Hint: check your device tree/driver and interface name."
    exit 2
  fi

  echo
  echo "=== Turning on $IFACE interface ==="
  if ip link show "$IFACE" | grep -q "state DOWN"; then
      echo "[..] Bringing up $IFACE at ${BITRATE} bps..."
      if sudo ip link set "$IFACE" up type can bitrate "$BITRATE"; then
          echo "[OK] $IFACE is now UP"
      else
          echo "[ERR] Failed to bring up $IFACE"; exit 3
      fi
  else
      echo "[OK] $IFACE is already UP"
  fi

  # 3) Observe bus frames (no state changes performed)
  echo
  echo "=== Capturing traffic for ${DUR}s ==="
  # Absolute timestamps; suppress stderr noise if iface is down
  CAPTURE="$(timeout --preserve-status "${DUR}s" candump -t a "$IFACE" 2>/dev/null || true)"
  COUNT="$(printf "%s\n" "$CAPTURE" | sed '/^[[:space:]]*$/d' | wc -l | awk '{print $1}')"

  # 4) Save full capture and show a readable summary
  printf "%s\n" "$CAPTURE" > "$LOG"

  if [ "$COUNT" -gt 0 ]; then
    echo "[OK] Observed $COUNT frame(s) in ${DUR}s"
    echo
    echo "=== Sample (first 10 lines) ==="
    printf "%s\n" "$CAPTURE" | head -n 10
    echo
    echo "[i] Full capture saved to: $LOG"
  else
    echo "[WARN] No frames observed in ${DUR}s (bus may be idle)."
    echo "      - If the interface is DOWN, bring it up with your desired bitrate, e.g.:"
    echo "        sudo ip link set $IFACE up type can bitrate 1000000"
    echo "      - If using silent/loopback modes, ensure filters and mode are correct."
    echo "      - Check cabling/termination and that peers are transmitting."
  fi
#+END_SRC

** References
- NVIDIA Jetson CAN Guide (r35.3.1):    [[https://docs.nvidia.com/jetson/archives/r35.3.1/DeveloperGuide/text/HR/ControllerAreaNetworkCan.html]]
- Protocol background: [[https://en.wikipedia.org/wiki/ISO_15765-2][ISO 15765-2 (ISO-TP)]] | [[https://en.wikipedia.org/wiki/CANopen][CANopen]]

* I²C Devices — IDs & Minimal Reads

** Inventory (I²C buses with quick map & summary)

#+BEGIN_SRC bash :dir /sudo:: :results output :exports both
  # Readable I²C inventory + quick maps (non-intrusive, uses i2cdetect -r)
  # Tip: set MAX_LINES to control how many map lines to show (default: 12)
  MAX_LINES="${MAX_LINES:-12}"

  # 1) Preconditions
  if ! command -v i2cdetect >/dev/null 2>&1; then
    echo "ERROR: i2c-tools not installed (apt-get install -y i2c-tools)"
    exit 0
  fi

  # 2) Bus inventory table (sorted)
  echo "== I²C bus inventory =="
  i2cdetect -l 2>/dev/null | sort -V | \
  awk '{
         # Drop the trailing "I2C adapter" (last 2 fields)
         n = NF-2; name=$3; for(i=4;i<=n;i++) name=name" "$i;
         printf "  %-6s %-8s  %s\n", $1, $2, name
       }'

  # 3) Per-bus map + concise summary
  echo ""
  echo "== Quick maps & summaries =="
  # Iterate using the inventory we just printed (ensures we only try real buses)
  while read -r line; do
    bus=$(awk "{print \$1}" <<<"$line")           # e.g., i2c-7
    [ -n "$bus" ] || continue
    busnum="${bus#i2c-}"
    [ -e "/dev/i2c-$busnum" ] || continue

    # Header with bus name (extract again for clarity)
    bname=$(awk '{
                   n = NF-2; name=$3; for(i=4;i<=n;i++) name=name" "$i;
                   print name
                 }' <<<"$line")
    printf "\nBus %s (%s):\n" "$busnum" "$bname"

    # Show a trimmed map (top MAX_LINES lines)
    i2cdetect -y -r "$busnum" 2>/dev/null | sed -n "1,${MAX_LINES}p"

    # Build a summary of detected vs in-use (UU) addresses
    i2cdetect -y -r "$busnum" 2>/dev/null | \
    awk 'NR==1{next}
         {
           # Row label like "30:" -> base address
           base=$1; sub(":","",base); base=strtonum("0x" base);
           for(i=2;i<=NF;i++){
             val=$i; if(val=="--") continue;
             addr = base + (i-2);
             hex  = sprintf("%02x", addr);
             if(val=="UU"){ used[hex]=1; u++ } else { found[hex]=1; d++ }
           }
         }
         END{
           if(d){
             printf "  Devices (%d):", d;
             for(a in found) printf " 0x%s", a; print ""
           } else print "  Devices: none"

           if(u){
             printf "  In-use (UU) (%d):", u;
             for(a in used) printf " 0x%s", a; print ""
           }
         }'
  done < <(i2cdetect -l 2>/dev/null | sort -V)
#+END_SRC

** ADS7142 NTC (bus 7 @ 0x1f)

#+BEGIN_SRC bash :dir /sudo:: :results output :exports both
  # Config (override with :var BUS=7 ADDR=0x1f)
  BUS="${BUS:-7}"
  ADDR="${ADDR:-0x1f}"

  # Preconditions
  command -v i2cget >/dev/null 2>&1 || { echo "ERROR: i2c-tools not installed"; exit 0; }
  [ -e "/dev/i2c-$BUS" ] || { echo "ERROR: /dev/i2c-$BUS not present"; exit 0; }

  # Read a single byte (no register). We only care that it responds and what it returns.
  VAL="$(i2cget -y "$BUS" "$ADDR" 2>/dev/null || true)"

  if [ -z "$VAL" ]; then
    echo "ADS7142 not responding at $ADDR on bus $BUS"
  else
    # Normalize and show decimal too
    VHEX="$(echo "$VAL" | tr 'A-F' 'a-f')"
    VDEC=$(( 0x${VHEX#0x} ))
    echo "ADS7142 responded: $VHEX (dec $VDEC) on bus $BUS @ $ADDR"
  fi
#+END_SRC

** HDC1080 (Temp/Humidity) — identity check (bus 7 @ 0x40)

#+BEGIN_SRC bash :dir /sudo:: :results output :exports both
  # Config (override with :var BUS=7 ADDR=0x40)
  BUS="${BUS:-7}"
  ADDR="${ADDR:-0x40}"

  # Expected values (word-swapped format)
  EXPECT_MFG="0x4954"  # "TI" = 0x5449 swapped
  EXPECT_DEV="0x5010"  # "HDC1080" = 0x1050 swapped

  # Preconditions
  command -v i2cget >/dev/null 2>&1 || { echo "ERROR: i2c-tools not installed"; exit 0; }
  [ -e "/dev/i2c-$BUS" ] || { echo "ERROR: /dev/i2c-$BUS not present"; exit 0; }

  echo "Querying HDC1080 on bus $BUS @ $ADDR …"

  # Read manufacturer and device IDs (word access)
  MFG=$(i2cget -y "$BUS" "$ADDR" 0xFE w 2>/dev/null || true)
  DEV=$(i2cget -y "$BUS" "$ADDR" 0xFF w 2>/dev/null || true)

  if [ -z "$MFG" ] && [ -z "$DEV" ]; then
    echo "FAIL: no response from HDC1080 at $ADDR on bus $BUS"
    exit 0
  fi

  printf "Manufacturer ID (0xFE): %s\n" "${MFG:-N/A}"
  printf "Device ID        (0xFF): %s\n" "${DEV:-N/A}"

  # Normalize case
  MFG=$(echo "$MFG" | tr 'A-F' 'a-f')
  DEV=$(echo "$DEV" | tr 'A-F' 'a-f')

  if [ "$MFG" = "$EXPECT_MFG" ]; then
    echo "PASS: Manufacturer ID matches expected TI ($EXPECT_MFG)"
  else
    echo "WARN: Unexpected manufacturer ID (got $MFG, expected $EXPECT_MFG)"
  fi

  if [ "$DEV" = "$EXPECT_DEV" ]; then
    echo "PASS: Device ID matches expected HDC1080 ($EXPECT_DEV)"
  else
    echo "WARN: Unexpected device ID (got $DEV, expected $EXPECT_DEV)"
  fi
#+END_SRC

** LIS2DE12 (Accelerometer) — WHO_AM_I check (0x0F → expects 0x33)

#+BEGIN_SRC bash :dir /sudo:: :results output :exports both
  # Config (override with :var BUS=7 ADDR=0x18 REG=0x0F EXPECT=0x33)
  BUS="${BUS:-7}"
  ADDR="${ADDR:-0x18}"
  REG="${REG:-0x0F}"
  EXPECT="${EXPECT:-0x33}"

  # Preconditions
  command -v i2cget >/dev/null 2>&1 || { echo "ERROR: i2c-tools not installed"; exit 0; }
  [ -e "/dev/i2c-$BUS" ] || { echo "ERROR: /dev/i2c-$BUS not present"; exit 0; }

  echo "Checking LIS2DE12 WHO_AM_I (reg $REG) on bus $BUS @ $ADDR …"

  # Read WHO_AM_I (single byte)
  VAL=$(i2cget -y "$BUS" "$ADDR" "$REG" b 2>/dev/null || true)

  if [ -z "$VAL" ]; then
    echo "FAIL: LIS2DE12 not responding on bus $BUS @ $ADDR"
    exit 0
  fi

  # Normalize case
  VHEX=$(echo "$VAL" | tr 'A-F' 'a-f')
  EHEX=$(echo "$EXPECT" | tr 'A-F' 'a-f')

  if [ "$VHEX" = "$EHEX" ]; then
    echo "PASS: LIS2DE12 WHO_AM_I = $VHEX (expected $EHEX)"
  else
    echo "WARN: Unexpected WHO_AM_I value (got $VHEX, expected $EHEX)"
  fi
#+END_SRC

** AT24CS01 (EEPROM + Unique ID) — dump (non-destructive)

#+BEGIN_SRC bash :dir /sudo:: :results output :exports both
  echo "EEPROM @0x50 (first 0x40 bytes):"
  i2cdump -y 1 0x50 b 2>/dev/null | sed -n '1,6p' || true
  echo
  echo "Unique ID page (example @0x58):"
  i2cdump -y 1 0x58 b 2>/dev/null | sed -n '1,8p' || true
#+END_SRC

** TPS25990 (eFuse) — ASCII signature block

#+BEGIN_SRC bash :dir /sudo:: :results output :exports both
  i2cdump -y 1 0x46 s 0x9a 2>/dev/null || echo "TPS25990 signature not found"
#+END_SRC

*Your example shows ASCII =TPS25990= in the dump.*

** GPIO Expanders

*** PCAL6408 — bus 1 @ 0x20 (Input Port 0 register 0x00)

#+BEGIN_SRC bash :dir /sudo:: :results output :exports both
  i2cget -y 1 0x20 0x00 b 2>/dev/null || echo "PCAL6408 not responding"
#+END_SRC

*** TCA9535 — bus 7 @ 0x20 (Input Port 0 register 0x00)

#+BEGIN_SRC :dir /sudo:: bash :results output :exports both
  i2cget -y 7 0x20 0x00 b 2>/dev/null || echo "TCA9535 not responding"
#+END_SRC


* SPI & TPM 2.0 (visibility)

** spidev nodes and TPM character device

#+BEGIN_SRC bash :results output :exports both
  ls -l /dev/spi* 2>/dev/null || echo "No /dev/spi*"
  ls -l /dev/tpm* 2>/dev/null || echo "No /dev/tpm*"
#+END_SRC

** Kernel binding (tpm_tis_spi or firmware TPM reference)

#+BEGIN_SRC bash :results output :exports both
  sudo dmesg | egrep -i "tpm|tpm_tis|spi" | tail -n 120
#+END_SRC

*Reference:* [[https://docs.nvidia.com/jetson/archives/r36.4/DeveloperGuide/SD/Security/FirmwareTPM.html][Firmware TPM — NVIDIA Jetson Linux Developer Guide.]]


* UART / TTY Nodes (recap)

#+BEGIN_SRC bash :results output :exports both
  ls -l /dev/ttyTHS* /dev/ttyS* /dev/ttyAMA* /dev/ttyUSB* /dev/ttyACM* 2>/dev/null || true
  dmesg | egrep -i "serial|ttyTHS|ttyS|ttyACM|ttyUSB" | tail -n 80
#+END_SRC

* Fans, Tach, and hwmon

** CPU Fan RPM (tachometer node)

#+BEGIN_SRC bash :results output :exports both
  cat /sys/devices/platform/39c0000.tachometer/hwmon/*/rpm 2>/dev/null || echo "CPU tach node not found"
#+END_SRC

** Cabinet Fan RPM & Temp Sensor (if exposed via hwmon)

#+BEGIN_SRC bash :results output :exports both
  for h in /sys/class/hwmon/hwmon*; do
      [ -e "$h" ] || continue
      echo "== $h ($(cat $h/name 2>/dev/null)) =="
      ls $h 2>/dev/null | egrep "temp[0-9]_input|fan[0-9]_input" | sed "s|^|  |"
  done
#+END_SRC

* Evidence (save logs/artifacts)
- Save outputs to =evidence/io_visibility/=:
  - =dmesg_io_tail.log=
  - =usb_ftdi_hub.log=
  - =i2c_map_bus1_bus7.txt=
  - =eeprom_at24_dump.txt=
  - =lis2de12_whoami.txt=
  - =hdc1080_ids.txt=
  - =tps25990_sig.txt=
  - =gpio_expanders_read.txt=
  - =tpm_spi_nodes.txt=
  - =tty_nodes.txt=
  - =hwmon_fans.txt=

* Troubleshooting (visibility only)

- *I²C device missing:* confirm bus number, power rail, and DT node; review pull-ups.
- *EEPROM UID page empty:* some lots lock UID; verify address (0x58 vs. vendor variant).
- *HDC1080 IDs byte-swapped:* =i2cget -w= returns words in LSB:MSB order; compare against 0x5449/0x1050.
- *LIS2DE12 WHO_AM_I ≠ 0x33:* check address variant or reset line.
- *FTDI missing:* re-seat USB, verify hub (0424:2514) enumerates, check cable.
- *TPM node absent:* ensure =tpm_tis_spi= or firmware TPM enabled in kernel/DT.

* Findings Log (NCR)

| ID | Subsystem | Node/Addr | Severity | Description                  | Evidence                                        | Status |
|----+-----------+-----------+----------+------------------------------+-------------------------------------------------+--------|
|  1 | I²C       | 7-0x18    | Major    | LIS2DE12 WHO_AM_I mismatch   | [[file:evidence/io_visibility/lis2de12_whoami.txt]] | Open   |
|  2 | USB/TTY   | ttyUSB?   | Minor    | RS-485 bridge not enumerated | [[file:evidence/io_visibility/usb_ftdi_hub.log]]    | Open   |

* Disposition

- [ ] PASS — all nodes visible and IDs readable
- [ ] FAIL — hold for DT/power/pinmux review and re-test

* Sign-off

| Role        | Name | Date | Signature |
|-------------+------+------+-----------|
| Operator    |      |      |           |
| QA Reviewer |      |      |           |

* Links
- [[file:00_INDEX.org][Back to Index]]
